---
- name: Deploy SMS Bridge Infrastructure with K3s
  hosts: localhost
  become: no  # No sudo needed for deployment, only vault password required
  
  collections:
    - kubernetes.core
    - community.general

  vars_files:
    - ../vault.yml  # Encrypted vault file from parent directory

  vars:
    pg_user: "postgres"
    pg_db: "sms_bridge"
    pg_port: 5432
    pgbouncer_port: 6432
    redis_port: 6379
    prometheus_port: 30090  # NodePort range: 30000-32767
    grafana_port: 30001     # NodePort range: 30000-32767
    python_receiver_port: 30080  # NodePort range: 30000-32767
    python_receiver_image: "sms_receiver_image"
    redis_password: "{{ redis_password }}"
    hash_secret_key: "{{ hash_secret_key }}"
    project_dir: "/home/{{ ansible_user_id }}/sms_bridge"
    namespace: "sms-bridge"

  tasks:
    - name: Verify K3s is installed and running
      uri:
        url: "https://localhost:6443/api/v1"
        method: GET
        validate_certs: no
        status_code: [200, 401, 403]  # 401/403 are OK, just means we need auth
      register: k3s_check
      failed_when: false

    - name: Fail if K3s is not running
      fail:
        msg: |
          K3s is not running or not installed. Please run the K3s installation first:
          ansible-playbook install_k3s.yml
      when: k3s_check.status == -1 or k3s_check.status|default(0) == 0

    - name: Create project directory
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create K3s manifests directory
      file:
        path: "{{ project_dir }}/k3s-manifests"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create logs directory for persistent logging
      file:
        path: "{{ project_dir }}/logs"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create SMS receiver logs subdirectory
      file:
        path: "{{ project_dir }}/logs/sms_receiver"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Grafana provisioning directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      loop:
        - "{{ project_dir }}/grafana/provisioning/datasources"
        - "{{ project_dir }}/grafana/provisioning/dashboards"

    # Copy application files
    - name: Copy PostgreSQL initialization script
      copy:
        dest: "{{ project_dir }}/init.sql"
        content: |
          -- Just load the schema, no user creation needed
          -- The 'postgres' user is already the superuser with full privileges
          \i /docker-entrypoint-initdb.d/schema.sql;
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Copy database schema file
      copy:
        src: ../schema.sql
        dest: "{{ project_dir }}/schema.sql"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Copy Python SMS server script
      copy:
        src: ../sms_server.py
        dest: "{{ project_dir }}/sms_server.py"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Copy validation check files
      copy:
        src: ../checks/
        dest: "{{ project_dir }}/checks/"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Dockerfile for SMS receiver
      copy:
        dest: "{{ project_dir }}/Dockerfile"
        content: |
          FROM python:3.11-slim
          WORKDIR /app
          COPY sms_server.py /app/sms_server.py
          COPY checks/ /app/checks/
          RUN pip install --no-cache-dir psycopg2-binary redis requests fastapi uvicorn asyncpg
          EXPOSE 8080
          CMD ["uvicorn", "sms_server:app", "--host", "0.0.0.0", "--port", "8080"]
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    # Build container image 
    - name: Check if buildah is available
      command: which buildah
      register: buildah_available
      failed_when: false

    - name: Check if docker is available  
      command: which docker
      register: docker_available
      failed_when: false

    - name: Fail if no container build tool is available
      fail:
        msg: |
          Neither Docker nor Buildah is available for building container images.
          Please install either Docker or Buildah:
          - Docker: sudo apt install docker.io
          - Buildah: sudo apt install buildah
      when: docker_available.rc != 0 and buildah_available.rc != 0

    - name: Build SMS receiver image with Docker
      shell: |
        cd {{ project_dir }}
        docker build -t {{ python_receiver_image }}:latest .
        # Save and import into K3s
        docker save {{ python_receiver_image }}:latest | sudo k3s ctr images import -
      args:
        creates: "{{ project_dir }}/.image_built"
      when: docker_available.rc == 0

    - name: Build SMS receiver image with Buildah
      shell: |
        cd {{ project_dir }}
        buildah build -t {{ python_receiver_image }}:latest .
        # Push to K3s containerd
        buildah push {{ python_receiver_image }}:latest containers-storage:{{ python_receiver_image }}:latest
        buildah push {{ python_receiver_image }}:latest oci-archive:/tmp/{{ python_receiver_image }}.tar
        sudo k3s ctr images import /tmp/{{ python_receiver_image }}.tar
      args:
        creates: "{{ project_dir }}/.image_built"
      when: docker_available.rc != 0 and buildah_available.rc == 0

    - name: Mark image as built
      file:
        path: "{{ project_dir }}/.image_built"
        state: touch
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    # Create Kubernetes manifests
    - name: Create namespace manifest
      copy:
        dest: "{{ project_dir }}/k3s-manifests/00-namespace.yaml"
        content: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{ namespace }}
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create ConfigMap for database initialization
      copy:
        dest: "{{ project_dir }}/k3s-manifests/01-postgres-config.yaml"
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: postgres-init
            namespace: {{ namespace }}
          data:
            init.sql: |
              -- Just load the schema, no user creation needed
              -- The 'postgres' user is already the superuser with full privileges
              \i /docker-entrypoint-initdb.d/schema.sql;
            schema.sql: |
              {{ lookup('file', '../schema.sql') | indent(6) }}
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Secret for sensitive data
      copy:
        dest: "{{ project_dir }}/k3s-manifests/02-secrets.yaml"
        content: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: sms-bridge-secrets
            namespace: {{ namespace }}
          type: Opaque
          data:
            postgres-password: {{ pg_password | b64encode }}
            redis-password: {{ redis_password | b64encode }}
            hash-secret-key: {{ hash_secret_key | b64encode }}
            cf-api-key: {{ cf_api_key | b64encode }}
            grafana-admin-password: {{ grafana_admin_password | b64encode }}
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create PostgreSQL PersistentVolume
      copy:
        dest: "{{ project_dir }}/k3s-manifests/03-postgres-pv.yaml"
        content: |
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: postgres-pv
          spec:
            capacity:
              storage: 10Gi
            accessModes:
              - ReadWriteOnce
            persistentVolumeReclaimPolicy: Retain
            storageClassName: local-path
            hostPath:
              path: {{ project_dir }}/postgres-data
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: postgres-pvc
            namespace: {{ namespace }}
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            storageClassName: local-path
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create PostgreSQL deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/04-postgres.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgres
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: postgres
            template:
              metadata:
                labels:
                  app: postgres
              spec:
                containers:
                - name: postgres
                  image: postgres:15
                  ports:
                  - containerPort: 5432
                  env:
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: postgres-password
                  - name: POSTGRES_DB
                    value: "{{ pg_db }}"
                  volumeMounts:
                  - name: postgres-storage
                    mountPath: /var/lib/postgresql/data
                  - name: init-sql
                    mountPath: /docker-entrypoint-initdb.d
                  resources:
                    limits:
                      memory: "1Gi"
                      cpu: "500m"
                    requests:
                      memory: "512Mi"
                      cpu: "250m"
                volumes:
                - name: postgres-storage
                  persistentVolumeClaim:
                    claimName: postgres-pvc
                - name: init-sql
                  configMap:
                    name: postgres-init
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: postgres
            namespace: {{ namespace }}
          spec:
            selector:
              app: postgres
            ports:
            - port: 5432
              targetPort: 5432
            type: ClusterIP
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Redis deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/05-redis.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: redis
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: redis
            template:
              metadata:
                labels:
                  app: redis
              spec:
                containers:
                - name: redis
                  image: redis:7-alpine
                  ports:
                  - containerPort: 6379
                  command: ["redis-server"]
                  args: 
                  - "--maxmemory"
                  - "256mb"
                  - "--maxclients"
                  - "1000"
                  - "--requirepass"
                  - "$(REDIS_PASSWORD)"
                  env:
                  - name: REDIS_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: redis-password
                  resources:
                    limits:
                      memory: "512Mi"
                      cpu: "200m"
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: redis
            namespace: {{ namespace }}
          spec:
            selector:
              app: redis
            ports:
            - port: 6379
              targetPort: 6379
            type: ClusterIP
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create PgBouncer deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/06-pgbouncer.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: pgbouncer
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: pgbouncer
            template:
              metadata:
                labels:
                  app: pgbouncer
              spec:
                containers:
                - name: pgbouncer
                  image: brainsam/pgbouncer
                  ports:
                  - containerPort: 6432
                  env:
                  - name: DB_HOST
                    value: "postgres"
                  - name: DB_PORT
                    value: "5432"
                  - name: DB_USER
                    value: "{{ pg_user }}"
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: postgres-password
                  - name: DB_NAME
                    value: "{{ pg_db }}"
                  - name: POOL_MODE
                    value: "transaction"
                  - name: MAX_CLIENT_CONN
                    value: "1000"
                  - name: DEFAULT_POOL_SIZE
                    value: "10"
                  resources:
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: pgbouncer
            namespace: {{ namespace }}
          spec:
            selector:
              app: pgbouncer
            ports:
            - port: 6432
              targetPort: 6432
            type: ClusterIP
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Prometheus ConfigMap
      copy:
        dest: "{{ project_dir }}/k3s-manifests/07-prometheus-config.yaml"
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: prometheus-config
            namespace: {{ namespace }}
          data:
            prometheus.yml: |
              global:
                scrape_interval: 15s
              scrape_configs:
                - job_name: 'postgres_exporter'
                  static_configs:
                    - targets: ['postgres-exporter:9187']
                - job_name: 'redis_exporter'
                  static_configs:
                    - targets: ['redis-exporter:9121']
                - job_name: 'sms_server'
                  static_configs:
                    - targets: ['sms-receiver:8080']
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Prometheus deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/08-prometheus.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: prometheus
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: prometheus
            template:
              metadata:
                labels:
                  app: prometheus
              spec:
                containers:
                - name: prometheus
                  image: prom/prometheus:latest
                  ports:
                  - containerPort: 9090
                  volumeMounts:
                  - name: prometheus-config
                    mountPath: /etc/prometheus
                  resources:
                    limits:
                      memory: "1Gi"
                      cpu: "500m"
                    requests:
                      memory: "512Mi"
                      cpu: "250m"
                volumes:
                - name: prometheus-config
                  configMap:
                    name: prometheus-config
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: prometheus
            namespace: {{ namespace }}
          spec:
            selector:
              app: prometheus
            ports:
            - port: 9090
              targetPort: 9090
              nodePort: {{ prometheus_port }}
            type: NodePort
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Grafana ConfigMap
      copy:
        dest: "{{ project_dir }}/k3s-manifests/09-grafana-config.yaml"
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-datasources
            namespace: {{ namespace }}
          data:
            prometheus.yml: |
              apiVersion: 1
              datasources:
                - name: Prometheus
                  type: prometheus
                  access: proxy
                  url: http://prometheus:9090
                  isDefault: true
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-dashboards-config
            namespace: {{ namespace }}
          data:
            dashboards.yml: |
              apiVersion: 1
              providers:
                - name: 'default'
                  orgId: 1
                  folder: ''
                  type: file
                  disableDeletion: false
                  updateIntervalSeconds: 10
                  allowUiUpdates: true
                  options:
                    path: /etc/grafana/provisioning/dashboards
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-dashboard
            namespace: {{ namespace }}
          data:
            postgres-dashboard.json: |
              {
                "dashboard": {
                  "id": null,
                  "title": "PostgreSQL Database",
                  "tags": [ "postgresql" ],
                  "style": "dark",
                  "timezone": "browser",
                  "panels": [
                    {
                      "id": 1,
                      "title": "Database Connections",
                      "type": "graph",
                      "targets": [
                        {
                          "expr": "pg_stat_database_numbackends{datname=\"{{ pg_db }}\"}",
                          "legendFormat": "Active Connections"
                        }
                      ],
                      "yAxes": [
                        {
                          "label": "Connections",
                          "min": 0
                        }
                      ],
                      "xAxes": [
                        {
                          "mode": "time"
                        }
                      ],
                      "gridPos": {
                        "h": 8,
                        "w": 12,
                        "x": 0,
                        "y": 0
                      }
                    },
                    {
                      "id": 2,
                      "title": "Database Size",
                      "type": "graph",
                      "targets": [
                        {
                          "expr": "pg_database_size_bytes{datname=\"{{ pg_db }}\"}",
                          "legendFormat": "Database Size"
                        }
                      ],
                      "yAxes": [
                        {
                          "label": "Bytes",
                          "min": 0
                        }
                      ],
                      "xAxes": [
                        {
                          "mode": "time"
                        }
                      ],
                      "gridPos": {
                        "h": 8,
                        "w": 12,
                        "x": 12,
                        "y": 0
                      }
                    }
                  ],
                  "time": {
                    "from": "now-1h",
                    "to": "now"
                  },
                  "refresh": "5s"
                }
              }
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Grafana deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/10-grafana.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: grafana
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: grafana
            template:
              metadata:
                labels:
                  app: grafana
              spec:
                containers:
                - name: grafana
                  image: grafana/grafana:latest
                  ports:
                  - containerPort: 3000
                  env:
                  - name: GF_SECURITY_ADMIN_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: grafana-admin-password
                  volumeMounts:
                  - name: grafana-datasources
                    mountPath: /etc/grafana/provisioning/datasources
                  - name: grafana-dashboards-config
                    mountPath: /etc/grafana/provisioning/dashboards
                  - name: grafana-dashboard
                    mountPath: /etc/grafana/provisioning/dashboards
                  resources:
                    limits:
                      memory: "512Mi"
                      cpu: "300m"
                    requests:
                      memory: "256Mi"
                      cpu: "150m"
                volumes:
                - name: grafana-datasources
                  configMap:
                    name: grafana-datasources
                - name: grafana-dashboards-config
                  configMap:
                    name: grafana-dashboards-config
                - name: grafana-dashboard
                  configMap:
                    name: grafana-dashboard
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana
            namespace: {{ namespace }}
          spec:
            selector:
              app: grafana
            ports:
            - port: 3000
              targetPort: 3000
              nodePort: {{ grafana_port }}
            type: NodePort
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create PostgreSQL exporter deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/11-postgres-exporter.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgres-exporter
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: postgres-exporter
            template:
              metadata:
                labels:
                  app: postgres-exporter
              spec:
                containers:
                - name: postgres-exporter
                  image: prometheuscommunity/postgres-exporter
                  ports:
                  - containerPort: 9187
                  env:
                  - name: DATA_SOURCE_NAME
                    value: "postgresql://{{ pg_user }}:$(POSTGRES_PASSWORD)@postgres:5432/{{ pg_db }}?sslmode=disable"
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: postgres-password
                  resources:
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: postgres-exporter
            namespace: {{ namespace }}
          spec:
            selector:
              app: postgres-exporter
            ports:
            - port: 9187
              targetPort: 9187
            type: ClusterIP
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create Redis exporter deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/12-redis-exporter.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: redis-exporter
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: redis-exporter
            template:
              metadata:
                labels:
                  app: redis-exporter
              spec:
                containers:
                - name: redis-exporter
                  image: oliver006/redis_exporter
                  command: ["/redis_exporter"]
                  ports:
                  - containerPort: 9121
                  args: ["-redis.addr=redis://:$(REDIS_PASSWORD)@redis:6379"]
                  env:
                  - name: REDIS_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: redis-password
                  resources:
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: redis-exporter
            namespace: {{ namespace }}
          spec:
            selector:
              app: redis-exporter
            ports:
            - port: 9121
              targetPort: 9121
            type: ClusterIP
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Create SMS receiver deployment
      copy:
        dest: "{{ project_dir }}/k3s-manifests/13-sms-receiver.yaml"
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: sms-receiver
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: sms-receiver
            template:
              metadata:
                labels:
                  app: sms-receiver
              spec:
                containers:
                - name: sms-receiver
                  image: {{ python_receiver_image }}:latest
                  imagePullPolicy: Never  # Use local image built with K3s
                  ports:
                  - containerPort: 8080
                  env:
                  - name: CF_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: cf-api-key
                  - name: CF_BACKEND_URL
                    value: "{{ cf_backend_url }}"
                  - name: POSTGRES_HOST
                    value: "pgbouncer"
                  - name: POSTGRES_DB
                    value: "{{ pg_db }}"
                  - name: POSTGRES_USER
                    value: "{{ pg_user }}"
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: postgres-password
                  - name: POSTGRES_PORT
                    value: "{{ pgbouncer_port }}"
                  - name: REDIS_HOST
                    value: "redis"
                  - name: REDIS_PORT
                    value: "6379"
                  - name: REDIS_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: redis-password
                  - name: HASH_SECRET_KEY
                    valueFrom:
                      secretKeyRef:
                        name: sms-bridge-secrets
                        key: hash-secret-key
                  - name: LOG_LEVEL
                    value: "INFO"
                  - name: LOG_DIR
                    value: "/app/logs"
                  volumeMounts:
                  - name: logs-volume
                    mountPath: /app/logs
                  - name: sms-receiver-logs
                    mountPath: /var/log/sms_receiver
                  resources:
                    limits:
                      memory: "1Gi"
                      cpu: "500m"
                    requests:
                      memory: "512Mi"
                      cpu: "250m"
                volumes:
                - name: logs-volume
                  hostPath:
                    path: {{ project_dir }}/logs
                    type: DirectoryOrCreate
                - name: sms-receiver-logs
                  hostPath:
                    path: {{ project_dir }}/logs/sms_receiver
                    type: DirectoryOrCreate
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: sms-receiver
            namespace: {{ namespace }}
          spec:
            selector:
              app: sms-receiver
            ports:
            - port: 8080
              targetPort: 8080
              nodePort: {{ python_receiver_port }}
            type: NodePort
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    # Apply all Kubernetes manifests
    - name: Apply namespace
      kubernetes.core.k8s:
        state: present
        src: "{{ project_dir }}/k3s-manifests/00-namespace.yaml"
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    - name: Apply ConfigMaps and Secrets
      kubernetes.core.k8s:
        state: present
        src: "{{ item }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      loop:
        - "{{ project_dir }}/k3s-manifests/01-postgres-config.yaml"
        - "{{ project_dir }}/k3s-manifests/02-secrets.yaml"
        - "{{ project_dir }}/k3s-manifests/07-prometheus-config.yaml"
        - "{{ project_dir }}/k3s-manifests/09-grafana-config.yaml"

    - name: Apply storage manifests
      kubernetes.core.k8s:
        state: present
        src: "{{ project_dir }}/k3s-manifests/03-postgres-pv.yaml"
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    - name: Apply database services
      kubernetes.core.k8s:
        state: present
        src: "{{ item }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      loop:
        - "{{ project_dir }}/k3s-manifests/04-postgres.yaml"
        - "{{ project_dir }}/k3s-manifests/05-redis.yaml"
        - "{{ project_dir }}/k3s-manifests/06-pgbouncer.yaml"

    - name: Wait for database services to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item }}"
        namespace: "{{ namespace }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      loop:
        - postgres
        - redis
        - pgbouncer

    - name: Apply monitoring services
      kubernetes.core.k8s:
        state: present
        src: "{{ item }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      loop:
        - "{{ project_dir }}/k3s-manifests/08-prometheus.yaml"
        - "{{ project_dir }}/k3s-manifests/10-grafana.yaml"
        - "{{ project_dir }}/k3s-manifests/11-postgres-exporter.yaml"
        - "{{ project_dir }}/k3s-manifests/12-redis-exporter.yaml"

    - name: Apply SMS receiver
      kubernetes.core.k8s:
        state: present
        src: "{{ project_dir }}/k3s-manifests/13-sms-receiver.yaml"
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    - name: Wait for all deployments to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ namespace }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 600

    - name: Get pod status
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      register: pod_status

    - name: Display pod status
      debug:
        msg: "Pod {{ item.metadata.name }} is {{ item.status.phase }}"
      loop: "{{ pod_status.resources }}"

    - name: Get service information
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: "{{ namespace }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      register: service_info

    - name: Display service endpoints
      debug:
        msg: |
          Service {{ item.metadata.name }}:
          {% if item.spec.type == 'NodePort' %}
          - External access: http://localhost:{{ item.spec.ports[0].nodePort }}
          {% endif %}
          - Internal access: {{ item.metadata.name }}:{{ item.spec.ports[0].port }}
      loop: "{{ service_info.resources }}"

    - name: Show access information
      debug:
        msg: |
          SMS Bridge K3s deployment completed!
          
          Services accessible at:
          - SMS Receiver: http://localhost:{{ python_receiver_port }}
          - Grafana: http://localhost:{{ grafana_port }} (admin/{{ grafana_admin_password }})
          - Prometheus: http://localhost:{{ prometheus_port }}
          
          Useful commands:
          - View pods: k3s kubectl get pods -n {{ namespace }}
          - View services: k3s kubectl get services -n {{ namespace }}
          - View logs: k3s kubectl logs -f deployment/<service-name> -n {{ namespace }}
          - Access shell: k3s kubectl exec -it deployment/<service-name> -n {{ namespace }} -- /bin/bash
