---
- name: Upgrade SMS Bridge K3s Infrastructure with Code and Schema Updates
  hosts: localhost
  become: yes
  
  collections:
    - kubernetes.core
    - community.general

  vars_files:
    - ../vault.yml

  vars:
    pg_user: "postgres"
    pg_db: "sms_bridge"
    python_receiver_image: "sms_receiver_image"
    project_dir: "/home/{{ ansible_user_id }}/sms_bridge"
    namespace: "sms-bridge"

  tasks:
    - name: Display upgrade start message
      debug:
        msg: |
          Starting SMS Bridge upgrade process:
          1. Rebuild Docker images with updated code
          2. Apply database schema migrations
          3. Restart services with new images
          
          This preserves existing data while applying code and schema updates.

    # Step 1: Backup existing data (optional but recommended)
    - name: Create backup timestamp
      set_fact:
        backup_timestamp: "{{ ansible_date_time.epoch }}"

    - name: Create backup directory
      file:
        path: "{{ project_dir }}/backups/{{ backup_timestamp }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Backup database schema before upgrade
      shell: |
        k3s kubectl exec deployment/postgres -n {{ namespace }} -- pg_dump -U {{ pg_user }} -d {{ pg_db }} --schema-only > {{ project_dir }}/backups/{{ backup_timestamp }}/schema_before_upgrade.sql
      register: schema_backup

    # Step 2: Copy updated application files
    - name: Copy updated database schema file
      copy:
        src: ../schema.sql
        dest: "{{ project_dir }}/schema_new.sql"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Copy updated requirements file
      copy:
        src: ../requirements.txt
        dest: "{{ project_dir }}/requirements.txt"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Copy updated Python SMS server script
      copy:
        src: ../sms_server.py
        dest: "{{ project_dir }}/sms_server.py"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Copy updated validation check files
      copy:
        src: ../checks/
        dest: "{{ project_dir }}/checks/"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    # Step 3: Apply database schema migrations
    - name: Create schema migration script
      copy:
        dest: "{{ project_dir }}/migrate_schema.sql"
        content: |
          -- SMS Bridge Schema Upgrade Migration
          -- Adds country_code and local_mobile columns to existing tables
          
          BEGIN;
          
          -- Add country_code and local_mobile columns to input_sms if they don't exist
          ALTER TABLE input_sms 
            ADD COLUMN IF NOT EXISTS country_code VARCHAR(5),
            ADD COLUMN IF NOT EXISTS local_mobile VARCHAR(15);
          
          -- Add country_code and local_mobile columns to out_sms if they don't exist  
          ALTER TABLE out_sms 
            ADD COLUMN IF NOT EXISTS country_code VARCHAR(5),
            ADD COLUMN IF NOT EXISTS local_mobile VARCHAR(15);
          
          -- Add country_code and local_mobile columns to sms_monitor if they don't exist
          ALTER TABLE sms_monitor 
            ADD COLUMN IF NOT EXISTS country_code VARCHAR(5),
            ADD COLUMN IF NOT EXISTS local_mobile VARCHAR(15);
          
          -- Create indexes for new columns if they don't exist
          CREATE INDEX IF NOT EXISTS idx_input_sms_country_code ON input_sms (country_code);
          CREATE INDEX IF NOT EXISTS idx_input_sms_local_mobile ON input_sms (local_mobile);
          CREATE INDEX IF NOT EXISTS idx_out_sms_country_code ON out_sms (country_code);
          CREATE INDEX IF NOT EXISTS idx_out_sms_local_mobile ON out_sms (local_mobile);
          CREATE INDEX IF NOT EXISTS idx_sms_monitor_country_code ON sms_monitor (country_code);
          CREATE INDEX IF NOT EXISTS idx_sms_monitor_local_mobile ON sms_monitor (local_mobile);
          
          -- Update system settings for new validation checks (if not exists)
          INSERT INTO system_settings (setting_key, setting_value) 
          VALUES ('allowed_country_codes', '["91", "1"]')
          ON CONFLICT (setting_key) DO NOTHING;
          
          -- Update check sequence to include foreign_number check (if not already there)
          UPDATE system_settings 
          SET setting_value = '["blacklist", "duplicate", "foreign_number", "header_hash", "mobile", "time_window"]'
          WHERE setting_key = 'check_sequence' 
          AND setting_value NOT LIKE '%foreign_number%';
          
          -- Update check enabled settings (if not already there)
          UPDATE system_settings 
          SET setting_value = '{"blacklist":true, "duplicate":true, "foreign_number":true, "header_hash":true, "mobile":true, "time_window":true}'
          WHERE setting_key = 'check_enabled' 
          AND setting_value NOT LIKE '%foreign_number%';
          
          COMMIT;
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Apply database schema migration
      shell: |
        k3s kubectl exec deployment/postgres -n {{ namespace }} -- psql -U {{ pg_user }} -d {{ pg_db }} -f - < {{ project_dir }}/migrate_schema.sql
      register: migration_result

    - name: Display migration result
      debug:
        msg: "Database schema migration completed: {{ migration_result.stdout }}"

    # Step 4: Rebuild Docker image with updated code
    - name: Remove old image build marker
      file:
        path: "{{ project_dir }}/.image_built"
        state: absent

    - name: Update Dockerfile for SMS receiver
      copy:
        dest: "{{ project_dir }}/Dockerfile"
        content: |
          FROM python:3.11-slim
          WORKDIR /app
          COPY requirements.txt /app/requirements.txt
          RUN pip install --no-cache-dir -r requirements.txt
          COPY sms_server.py /app/sms_server.py
          COPY checks/ /app/checks/
          EXPOSE 8080
          CMD ["uvicorn", "sms_server:app", "--host", "0.0.0.0", "--port", "8080"]
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    - name: Check if docker is available  
      command: which docker
      register: docker_available
      failed_when: false

    - name: Check if buildah is available
      command: which buildah
      register: buildah_available
      failed_when: false

    - name: Fail if no container build tool is available
      fail:
        msg: |
          Neither Docker nor Buildah is available for building container images.
          Please install either Docker or Buildah.
      when: docker_available.rc != 0 and buildah_available.rc != 0

    - name: Build updated SMS receiver image with Docker
      shell: |
        cd {{ project_dir }}
        # Remove old image
        docker rmi {{ python_receiver_image }}:latest || true
        sudo k3s ctr images rm docker.io/library/{{ python_receiver_image }}:latest || true
        
        # Build new image
        docker build -t {{ python_receiver_image }}:latest .
        
        # Import into K3s
        docker save {{ python_receiver_image }}:latest | sudo k3s ctr images import -
      when: docker_available.rc == 0

    - name: Build updated SMS receiver image with Buildah
      shell: |
        cd {{ project_dir }}
        # Remove old image
        buildah rmi {{ python_receiver_image }}:latest || true
        sudo k3s ctr images rm docker.io/library/{{ python_receiver_image }}:latest || true
        
        # Build new image
        buildah build -t {{ python_receiver_image }}:latest .
        
        # Import into K3s
        buildah push {{ python_receiver_image }}:latest oci-archive:/tmp/{{ python_receiver_image }}.tar
        sudo k3s ctr images import /tmp/{{ python_receiver_image }}.tar
        rm -f /tmp/{{ python_receiver_image }}.tar
      when: docker_available.rc != 0 and buildah_available.rc == 0

    # Step 5: Update ConfigMap with new schema
    - name: Update PostgreSQL ConfigMap with new schema
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: postgres-init
            namespace: "{{ namespace }}"
          data:
            init.sql: |
              -- Just load the schema, no user creation needed
              -- The 'postgres' user is already the superuser with full privileges
              \i /docker-entrypoint-initdb.d/schema.sql;
            schema.sql: "{{ lookup('file', '../schema.sql') }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    # Step 6: Restart SMS receiver deployment to use new image
    - name: Force restart SMS receiver deployment with new image
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: sms-receiver
            namespace: "{{ namespace }}"
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ ansible_date_time.iso8601 }}"
                  upgrade.sms-bridge/timestamp: "{{ backup_timestamp }}"
              spec:
                containers:
                - name: sms-receiver
                  image: "{{ python_receiver_image }}:latest"
                  imagePullPolicy: Never  # Force use of locally built image
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    # Step 7: Wait for deployment and verify
    - name: Wait for SMS receiver deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: sms-receiver
        namespace: "{{ namespace }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300

    - name: Verify database schema upgrade
      shell: |
        k3s kubectl exec deployment/postgres -n {{ namespace }} -- psql -U {{ pg_user }} -d {{ pg_db }} -c "\d+ input_sms"
      register: schema_verification

    - name: Display schema verification
      debug:
        msg: "Updated schema verification: {{ schema_verification.stdout }}"

    - name: Display upgrade completion message
      debug:
        msg: |
          SMS Bridge upgrade completed successfully!
          
          Changes applied:
          ✅ Docker image rebuilt with updated Python code
          ✅ Database schema migrated with country_code and local_mobile columns
          ✅ SMS receiver deployment restarted with new image
          ✅ Existing data preserved during upgrade
          
          Backup created at: {{ project_dir }}/backups/{{ backup_timestamp }}/
          
          Services remain accessible at:
          - SMS Receiver: http://localhost:30080
          - Grafana: http://localhost:30001
          - Prometheus: http://localhost:30090
          
          Verify functionality by testing SMS reception and onboarding features.
