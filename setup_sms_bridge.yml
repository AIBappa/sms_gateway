---
- name: Deploy SMS Bridge Infrastructure with Vault (community.docker only)
  hosts: localhost
  become: no  # No sudo needed for Docker operations
  
  collections:
    - community.docker

  vars_files:
    - vault.yml  # Encrypted vault file

  vars:
    pg_user: "postgres"  # Use default PostgreSQL superuser
    pg_db: "sms_bridge"
    pg_port: 5432
    pgbouncer_port: 6432
    redis_port: 6379
    prometheus_port: 9090
    grafana_port: 3001
    python_receiver_port: 8080
    python_receiver_image: "sms_receiver_image"
    redis_password: "{{ redis_password }}"  # Reference from vault
    hash_secret_key: "{{ hash_secret_key }}"  # Reference from vault
    project_dir: "{{ ansible_env.HOME }}/sms_bridge"

  tasks:
    - name: Debug distribution info
      debug:
        msg: "Distribution: {{ ansible_distribution }}, OS Family: {{ ansible_os_family }}"

    # Commenting out all OS-level tasks to avoid apt/repository issues
    # - name: Fix duplicate Microsoft Edge repository entries
    #   file:
    #     path: /etc/apt/sources.list.d/microsoft-edge-dev.list
    #     state: absent
    #   ignore_errors: yes

    # - name: Disable BossLinux security-updates repository
    #   lineinfile:
    #     path: /etc/apt/sources.list
    #     regexp: '^deb http://packages.bosslinux.in/security-updates'
    #     line: '#deb http://packages.bosslinux.in/security-updates urja main contrib non-free'
    #     state: present
    #   ignore_errors: yes

    # - name: Disable BossLinux security-updates source repository
    #   lineinfile:
    #     path: /etc/apt/sources.list
    #     regexp: '^deb-src http://packages.bosslinux.in/security-updates'
    #     line: '#deb-src http://packages.bosslinux.in/security-updates urja main contrib non-free'
    #     state: present
    #   ignore_errors: yes

    # - name: Disable Kubernetes repository
    #   lineinfile:
    #     path: /etc/apt/sources.list.d/kubernetes.list
    #     regexp: '^deb https://apt.kubernetes.io'
    #     line: '#deb https://apt.kubernetes.io kubernetes-xenial main'
    #     state: present
    #     create: no
    #   ignore_errors: yes

    # - name: Update apt cache after fixes
    #   apt:
    #     update_cache: yes
    #     cache_valid_time: 3600  # Cache for 1 hour to avoid repeated updates

    # Docker installation tasks commented out - already installed
    # - name: Install Docker and Docker Compose dependencies only
    #   apt:
    #     name:
    #       - docker.io
    #       - docker-compose
    #       - python3-docker
    #     state: present
    #     update_cache: true

    # - name: Start and enable Docker service
    #   systemd:
    #     name: docker
    #     state: started
    #     enabled: yes

    # - name: Add current user to docker group
    #   user:
    #     name: "{{ ansible_user_id }}"
    #     groups: docker
    #     append: yes

    - name: Create project directory
      file:
        path: "{{ project_dir }}"
        state: directory

    - name: Create logs directory for persistent logging
      file:
        path: "{{ project_dir }}/logs"
        state: directory
        mode: '0755'

    - name: Create SMS receiver logs subdirectory
      file:
        path: "{{ project_dir }}/logs/sms_receiver"
        state: directory
        mode: '0755'

    - name: Create Grafana provisioning directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ project_dir }}/grafana/provisioning/datasources"
        - "{{ project_dir }}/grafana/provisioning/dashboards"

    - name: Copy PostgreSQL initialization script with new schema
      copy:
        dest: "{{ project_dir }}/init.sql"
        content: |
          -- Just load the schema, no user creation needed
          -- The 'postgres' user is already the superuser with full privileges
          \i /docker-entrypoint-initdb.d/schema.sql;

    - name: Copy database schema file
      copy:
        src: ./schema.sql
        dest: "{{ project_dir }}/schema.sql"

    - name: Copy Dockerfile for Python SMS receiver
      copy:
        dest: "{{ project_dir }}/Dockerfile"
        content: |
          FROM python:3.11-slim
          WORKDIR /app
          COPY sms_server.py /app/sms_server.py
          COPY checks/ /app/checks/
          RUN pip install --no-cache-dir psycopg2-binary redis requests fastapi uvicorn asyncpg
          EXPOSE 8080
          CMD ["uvicorn", "sms_server:app", "--host", "0.0.0.0", "--port", "8080"]

    - name: Copy Python SMS server script
      copy:
        src: ./sms_server.py
        dest: "{{ project_dir }}/sms_server.py"

    - name: Copy validation check files
      copy:
        src: ./checks/
        dest: "{{ project_dir }}/checks/"

    - name: Create Prometheus configuration
      copy:
        dest: "{{ project_dir }}/prometheus.yml"
        content: |
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'postgres_exporter'
              static_configs:
                - targets: ['postgres_exporter:9187']
            - job_name: 'redis_exporter'
              static_configs:
                - targets: ['redis_exporter:9121']
            - job_name: 'sms_server'
              static_configs:
                - targets: ['sms_receiver:8080']

    - name: Create Grafana datasource configuration
      copy:
        dest: "{{ project_dir }}/grafana/provisioning/datasources/prometheus.yml"
        content: |
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://prometheus:9090
              isDefault: true

    - name: Create Grafana dashboard configuration
      copy:
        dest: "{{ project_dir }}/grafana/provisioning/dashboards/dashboards.yml"
        content: |
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              updateIntervalSeconds: 10
              allowUiUpdates: true
              options:
                path: /etc/grafana/provisioning/dashboards

    - name: Create PostgreSQL monitoring dashboard
      copy:
        dest: "{{ project_dir }}/grafana/provisioning/dashboards/postgres-dashboard.json"
        content: |
          {
            "dashboard": {
              "id": null,
              "title": "PostgreSQL Database",
              "tags": [ "postgresql" ],
              "style": "dark",
              "timezone": "browser",
              "panels": [
                {
                  "id": 1,
                  "title": "Database Connections",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "pg_stat_database_numbackends{datname=\"sms_bridge\"}",
                      "legendFormat": "Active Connections"
                    }
                  ],
                  "yAxes": [
                    {
                      "label": "Connections",
                      "min": 0
                    }
                  ],
                  "xAxes": [
                    {
                      "mode": "time"
                    }
                  ],
                  "gridPos": {
                    "h": 8,
                    "w": 12,
                    "x": 0,
                    "y": 0
                  }
                },
                {
                  "id": 2,
                  "title": "Database Size",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "pg_database_size_bytes{datname=\"sms_bridge\"}",
                      "legendFormat": "Database Size"
                    }
                  ],
                  "yAxes": [
                    {
                      "label": "Bytes",
                      "min": 0
                    }
                  ],
                  "xAxes": [
                    {
                      "mode": "time"
                    }
                  ],
                  "gridPos": {
                    "h": 8,
                    "w": 12,
                    "x": 12,
                    "y": 0
                  }
                }
              ],
              "time": {
                "from": "now-1h",
                "to": "now"
              },
              "refresh": "5s"
            }
          }

    # Create Docker network for container communication
    - name: Create SMS bridge Docker network
      community.docker.docker_network:
        name: sms_bridge_network
        state: present

    # Create Docker volume for PostgreSQL data
    - name: Create PostgreSQL data volume
      community.docker.docker_volume:
        name: pg_data
        state: present

    # Start PostgreSQL container
    - name: Start PostgreSQL container
      community.docker.docker_container:
        name: postgres
        image: postgres:15
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - postgres
        ports:
          - "{{ pg_port }}:5432"
        volumes:
          - pg_data:/var/lib/postgresql/data
          - "{{ project_dir }}/init.sql:/docker-entrypoint-initdb.d/init.sql:ro"
          - "{{ project_dir }}/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro"
        env:
          POSTGRES_PASSWORD: "{{ pg_password }}"
          POSTGRES_DB: "{{ pg_db }}"

    # Start Redis container
    - name: Start Redis container
      community.docker.docker_container:
        name: redis
        image: redis:7-alpine
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - redis
        ports:
          - "{{ redis_port }}:6379"
        command: ["redis-server", "--maxmemory", "256mb", "--maxclients", "1000", "--requirepass", "{{ redis_password }}"]

    # Start PgBouncer container
    - name: Start PgBouncer container
      community.docker.docker_container:
        name: pgbouncer
        image: brainsam/pgbouncer
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - pgbouncer
        ports:
          - "{{ pgbouncer_port }}:6432"
        env:
          DB_HOST: postgres
          DB_PORT: 5432
          DB_USER: "{{ pg_user }}"
          DB_PASSWORD: "{{ pg_password }}"
          DB_NAME: "{{ pg_db }}"
          POOL_MODE: transaction
          MAX_CLIENT_CONN: 1000
          DEFAULT_POOL_SIZE: 10

    # Start Prometheus container
    - name: Start Prometheus container
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus:latest
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - prometheus
        ports:
          - "{{ prometheus_port }}:9090"
        volumes:
          - "{{ project_dir }}/prometheus.yml:/etc/prometheus/prometheus.yml:ro"

    # Start Grafana container
    - name: Start Grafana container
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana:latest
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - grafana
        ports:
          - "{{ grafana_port }}:3000"
        volumes:
          - "{{ project_dir }}/grafana/provisioning:/etc/grafana/provisioning:ro"
        env:
          GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password }}"

    # Start PostgreSQL exporter container
    - name: Start PostgreSQL exporter container
      community.docker.docker_container:
        name: postgres_exporter
        image: prometheuscommunity/postgres-exporter
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - postgres_exporter
        ports:
          - "9187:9187"
        env:
          DATA_SOURCE_NAME: "postgresql://{{ pg_user }}:{{ pg_password }}@postgres:5432/{{ pg_db }}?sslmode=disable"

    # Start Redis exporter container
    - name: Start Redis exporter container
      community.docker.docker_container:
        name: redis_exporter
        image: oliver006/redis_exporter
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - redis_exporter
        ports:
          - "9121:9121"
        command: ["-redis.addr=redis://:{{ redis_password }}@redis:6379"]

    # Build Python SMS receiver Docker image
    - name: Build Python SMS receiver Docker image
      community.docker.docker_image:
        name: "{{ python_receiver_image }}"
        build:
          path: "{{ project_dir }}"
          dockerfile: Dockerfile
        source: build
        state: present
        force_source: yes

    # Start SMS receiver container
    - name: Start SMS receiver container
      community.docker.docker_container:
        name: sms_receiver
        image: "{{ python_receiver_image }}"
        state: started
        restart_policy: unless-stopped
        networks:
          - name: sms_bridge_network
            aliases:
              - sms_receiver
        ports:
          - "{{ python_receiver_port }}:8080"
        volumes:
          - "{{ project_dir }}/logs:/app/logs:rw"
          - "{{ project_dir }}/logs/sms_receiver:/var/log/sms_receiver:rw"
        env:
          CF_API_KEY: "{{ cf_api_key }}"
          CF_BACKEND_URL: "{{ cf_backend_url }}"
          POSTGRES_HOST: pgbouncer
          POSTGRES_DB: "{{ pg_db }}"
          POSTGRES_USER: "{{ pg_user }}"
          POSTGRES_PASSWORD: "{{ pg_password }}"
          POSTGRES_PORT: "{{ pgbouncer_port }}"
          REDIS_HOST: redis
          REDIS_PORT: 6379
          REDIS_PASSWORD: "{{ redis_password }}"
          HASH_SECRET_KEY: "{{ hash_secret_key }}"
          LOG_LEVEL: INFO
          LOG_DIR: /app/logs

    # Wait for containers to be healthy
    - name: Wait for PostgreSQL to be ready
      community.docker.docker_container_info:
        name: postgres
      register: postgres_info
      until: postgres_info.container.State.Status == "running"
      retries: 30
      delay: 2

    - name: Wait for Redis to be ready
      community.docker.docker_container_info:
        name: redis
      register: redis_info
      until: redis_info.container.State.Status == "running"
      retries: 30
      delay: 2

    - name: Show container status
      community.docker.docker_container_info:
        name: "{{ item }}"
      register: container_info
      loop:
        - postgres
        - redis
        - pgbouncer
        - prometheus
        - grafana
        - postgres_exporter
        - redis_exporter
        - sms_receiver

    - name: Display container status
      debug:
        msg: "Container {{ item.item }} is {{ item.container.State.Status }}"
      loop: "{{ container_info.results }}"
      when: item.container is defined

    - name: Show container logs for debugging
      shell: |
        echo "=== Container Status ==="
        docker ps -a --filter "network=sms_bridge_network"
        echo ""
        echo "=== Redis Container Logs ==="
        docker logs redis --tail 20
        echo ""
        echo "=== SMS Receiver Container Logs ==="
        docker logs sms_receiver --tail 20
        echo ""
        echo "=== PostgreSQL Container Logs ==="
        docker logs postgres --tail 20
      register: container_debug
      ignore_errors: yes

    - name: Display debug output
      debug:
        var: container_debug.stdout_lines
